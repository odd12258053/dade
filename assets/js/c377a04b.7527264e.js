"use strict";(self.webpackChunkdade_documentation=self.webpackChunkdade_documentation||[]).push([[971],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1269:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"",description:"dade is a framework for defining data structure to Rust structures"},s="dade",u={unversionedId:"index",id:"index",title:"",description:"dade is a framework for defining data structure to Rust structures",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/dade/",tags:[],version:"current",frontMatter:{title:"",description:"dade is a framework for defining data structure to Rust structures"},sidebar:"sidebar",next:{title:"models",permalink:"/dade/usage/models"}},c={},p=[],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dade"},"dade"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"dade")," is a framework for defining data structure to Rust structures, like ",(0,i.kt)("a",{parentName:"p",href:"https://pydantic-docs.helpmanual.io"},"pydantic")," in Python."),(0,i.kt)("p",null,"For the easy handle of data, the following will support it."),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","validation for (primitive) types.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"numeric types; u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize, f32, f64"),(0,i.kt)("li",{parentName:"ul"},"boolean"),(0,i.kt)("li",{parentName:"ul"},"String"),(0,i.kt)("li",{parentName:"ul"},"Optional"),(0,i.kt)("li",{parentName:"ul"},"Vec"),(0,i.kt)("li",{parentName:"ul"},"nested model"),(0,i.kt)("li",{parentName:"ul"},"enum")))),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","export a data schema conforms JsonSchema."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","load a model from JSON."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","dump a JSON-string from a model."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","implements for useful types. e.g. URL, email and etc."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","publish a trait that for you implements any custom type with your validation. ")),(0,i.kt)("p",null,"For example, define book-model."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use dade::{model, Model};\n\n#[model]\nstruct Year(\n  #[field(ge = 1000, le = 9999)]\n  u16\n);\n\n#[model]\nstruct Tag(String);\n\n#[model]\nenum Category {\n  C1,\n  C2,\n  C3\n}\n\n#[model]\nstruct Book {\n  published: Year,\n  #[field(min_length = 1, max_length = 30)]\n  publisher: String,\n  #[field(min_length = 1, max_length = 30)]\n  author: String,\n  #[field(min_length = 1)]\n  title: String,\n  #[field(min_length = 1)]\n  description: String,\n  #[field(ge = 0.0)]\n  price: f32,\n  tags: Option<Vec<Tag>>,\n  category: Category\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"If you want to validate a value, you will get a schema that conforms JsonSchema, for the given model, by the below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let schema = Book::schema()\n")),(0,i.kt)("p",null,"The schema is "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$ref": "#/definitions/Book",\n  "definitions": {\n    "Book": {\n        "properties": {\n            "author": {\n                "maxLength": 30,\n                "minLength": 1,\n                "title": "Author",\n                "type": "string"\n            },\n            "category": {\n                "$ref": "#/definitions/Category",\n                "title": "Category"\n            },\n            "description": {\n                "minLength": 1,\n                "title": "Description",\n                "type": "string"\n            },\n            "price": {\n                "minimum": 0,\n                "title": "Price",\n                "type": "number"\n            },\n            "published": {\n                "$ref": "#/definitions/Year",\n                "title": "Published"\n            },\n            "publisher": {\n                "maxLength": 30,\n                "minLength": 1,\n                "title": "Publisher",\n                "type": "string"\n            },\n            "tags": {\n                "anyOf": [\n                  { "type": "null" },\n                  {\n                    "items": { "$ref": "#/definitions/Tag" },\n                    "type": "array"\n                  }\n                ],\n                "title": "Tags"\n            },\n            "title": {\n                "minLength": 1,\n                "title": "Title",\n                "type": "string"\n            }\n        },\n        "required": ["published", "publisher", "author", "title", "description", "price", "category"],\n        "title": "Book",\n        "type": "object"\n    },\n    "Category": {\n        "anyOf": [\n          {"const": "C1", "title": "C1"},\n          {"const": "C2", "title": "C2"},\n          {"const": "C3", "title": "C3"}\n        ],\n        "title": "Category"\n    },\n    "Tag": {\n        "title": "Tag",\n        "type": "string"\n    },\n    "Year": {\n        "maximum": 9999,\n        "minimum": 1000,\n        "title": "Year",\n        "type": "integer"\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);