"use strict";(self.webpackChunkdade_documentation=self.webpackChunkdade_documentation||[]).push([[186],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=o(a),c=l,v=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return a?n.createElement(v,i(i({ref:t},p),{},{components:a})):n.createElement(v,i({ref:t},p))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:l,i[1]=u;for(var o=2;o<r;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2248:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var n=a(7462),l=(a(7294),a(3905));const r={title:"field"},i="Fields",u={unversionedId:"usage/fields",id:"usage/fields",title:"field",description:"We describe a field in dade that supports types and usage conditions.",source:"@site/docs/usage/fields.md",sourceDirName:"usage",slug:"/usage/fields",permalink:"/dade/usage/fields",tags:[],version:"current",frontMatter:{title:"field"},sidebar:"sidebar",previous:{title:"models",permalink:"/dade/usage/models"},next:{title:"schema",permalink:"/dade/usage/schema"}},s={},o=[{value:"Support types",id:"support-types",level:2},{value:"numeric",id:"numeric",level:3},{value:"Usage",id:"usage",level:4},{value:"String",id:"string",level:3},{value:"Array",id:"array",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Null",id:"null",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Optional",id:"optional",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Term of fields",id:"term-of-fields",level:2},{value:"Alias",id:"alias",level:3},{value:"Default",id:"default",level:3},{value:"Validate",id:"validate",level:3}],p={toc:o};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"fields"},"Fields"),(0,l.kt)("p",null,"We describe a field in dade that supports types and usage conditions."),(0,l.kt)("h2",{id:"support-types"},"Support types"),(0,l.kt)("h3",{id:"numeric"},"numeric"),(0,l.kt)("p",null,"This numeric in dade is u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize, f32, or f64 in Rust."),(0,l.kt)("p",null,"We can validate greater than, less than, or equal for a numeric type.\nFor detail,"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The term ",(0,l.kt)("inlineCode",{parentName:"li"},"gt")," means to validate greater than the given value."),(0,l.kt)("li",{parentName:"ul"},"The term ",(0,l.kt)("inlineCode",{parentName:"li"},"ge")," means to validate equal to or greater than the given value."),(0,l.kt)("li",{parentName:"ul"},"The term ",(0,l.kt)("inlineCode",{parentName:"li"},"lt")," means to validate less than the given value."),(0,l.kt)("li",{parentName:"ul"},"The term ",(0,l.kt)("inlineCode",{parentName:"li"},"le")," means to validate equal to or less than the given value.")),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Id {\n    #[field(ge = 1, lt = 100)]\n    id: u64\n}\n")),(0,l.kt)("h3",{id:"string"},"String"),(0,l.kt)("p",null,"This string in dade is String in Rust.\nIn this version, dade does not support char and bytes."),(0,l.kt)("p",null,"Supported terms are below. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min_length"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If set, a string must have a length equal to or greater than the given value."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_length"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If set, a string must have a length equal to or less than the given value.")))),(0,l.kt)("h3",{id:"array"},"Array"),(0,l.kt)("p",null,"This array in dade is Vec in Rust."),(0,l.kt)("p",null,"Supported terms are below. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min_items"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If set, an array must have a length equal to or greater than the given value."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_items"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If set, an array must have a length equal to or less than the given value.")))),(0,l.kt)("h3",{id:"boolean"},"Boolean"),(0,l.kt)("p",null,"This boolean in dade is Boolean in Rust."),(0,l.kt)("h3",{id:"null"},"Null"),(0,l.kt)("p",null,"This null in dade is unit",(0,l.kt)("inlineCode",{parentName:"p"},"()")," in Rust.\nThis value is only null in JSON."),(0,l.kt)("h4",{id:"usage-1"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Empty {\n    empty: ()\n}\n")),(0,l.kt)("h3",{id:"optional"},"Optional"),(0,l.kt)("p",null,"In case of value exists or does not in JSON, you can use Option in Rust."),(0,l.kt)("h4",{id:"usage-2"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Item {\n    value: Option<u32>\n}\n")),(0,l.kt)("h2",{id:"term-of-fields"},"Term of fields"),(0,l.kt)("h3",{id:"alias"},"Alias"),(0,l.kt)("p",null,"The usage of the term Alias is two methods.\nIf a key in JSON maps another named field in a model, you can use the term Alias."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[model]\nstruct  Item {\n    #[field(alias = "val")]\n    value: u64,\n}\n')),(0,l.kt)("p",null,"Then, the following passed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let item = Item::parse("{\\"val\\": 1}");\n')),(0,l.kt)("p",null,"On the other hand, use in an enum.\nFor example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[model]\nenum Pattern {\n    #[field(alias = "p1")]\n    Pattern1,\n    #[field(alias = "p2")]\n    Pattern2,\n}\n')),(0,l.kt)("p",null,"In this case, "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If a JSON value is ",(0,l.kt)("inlineCode",{parentName:"li"},'"p1"'),", the parse result will be ",(0,l.kt)("inlineCode",{parentName:"li"},"Pattern::Pattern1"),"."),(0,l.kt)("li",{parentName:"ul"},"If a JSON value is ",(0,l.kt)("inlineCode",{parentName:"li"},'"p2"'),", the parse result will be ",(0,l.kt)("inlineCode",{parentName:"li"},"Pattern::Pattern2"),"."),(0,l.kt)("li",{parentName:"ul"},"If a JSON value is another string, the parse be failed.")),(0,l.kt)("h3",{id:"default"},"Default"),(0,l.kt)("p",null,"If a key does not exist in JSON, dade set a given value corresponding to it."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct  Item {\n    #[field(default = 1)]\n    value: u64,\n}\n")),(0,l.kt)("p",null,"Then, the following passed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let item = Item::parse("{}");\n// item = {value: 1}\n')),(0,l.kt)("h3",{id:"validate"},"Validate"),(0,l.kt)("p",null,"If you want to validate value to a custom validator, you can use the term validate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use dade::{model, Model, Result, Error};\nfn custom_validate(value: i8) -> Result<i8> {\n    if value > 0 {\n        Ok(value)\n    } else {\n        Err(Error::validate_err("only positive"))\n    }\n}\n\n#[model]\nstruct Item {\n    #[field(validate = custom_validate)]\n    value: i8\n}\n')),(0,l.kt)("p",null,"In this, the following is failed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let instance = Item::parse("{\\"value\\": -1}")?;\n')))}d.isMDXComponent=!0}}]);