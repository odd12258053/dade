"use strict";(self.webpackChunkdade_documentation=self.webpackChunkdade_documentation||[]).push([[369],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=l,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const r={title:"models",description:"how to define a model with Rust structures, create a model instance from string with JSON, and export a String from a model instance."},i="Models",o={unversionedId:"usage/models",id:"usage/models",title:"models",description:"how to define a model with Rust structures, create a model instance from string with JSON, and export a String from a model instance.",source:"@site/docs/usage/models.md",sourceDirName:"usage",slug:"/usage/models",permalink:"/dade/usage/models",tags:[],version:"current",frontMatter:{title:"models",description:"how to define a model with Rust structures, create a model instance from string with JSON, and export a String from a model instance."},sidebar:"sidebar",previous:{title:"",permalink:"/dade/"},next:{title:"field",permalink:"/dade/usage/fields"}},s={},d=[{value:"Definitions",id:"definitions",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Validation",id:"validation",level:3},{value:"Nested Models",id:"nested-models",level:2},{value:"Recursive Models",id:"recursive-models",level:2},{value:"Inherited Models",id:"inherited-models",level:2},{value:"Tuple Models",id:"tuple-models",level:2},{value:"Pattern Models",id:"pattern-models",level:2}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"models"},"Models"),(0,l.kt)("p",null,"This article writes how to define a model with Rust structures(struct and enum), create a model instance from string with JSON, and export a String from a model instance."),(0,l.kt)("h2",{id:"definitions"},"Definitions"),(0,l.kt)("p",null,"The model in ",(0,l.kt)("inlineCode",{parentName:"p"},"dade")," has to implement dade::Model.\nTo implement it, ",(0,l.kt)("inlineCode",{parentName:"p"},"dade")," serve the macro dade::model."),(0,l.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Item {\n    value: u8\n}\n")),(0,l.kt)("p",null,"This example corresponds to JSON Object with kay with ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," and value for the key with an integer in dade.\nSo, we can get an instance for this example from the given string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let instance: Item = Item::parse("{\\"value\\": 1}")?;\n// instance = Item { value: 1 }\n')),(0,l.kt)("p",null,"And then, if to export JSON string, call function ",(0,l.kt)("inlineCode",{parentName:"p"},".json(bool)")," likely this bellow."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let json_string: String = instance::json(false);\n// json_string = "{\\"value\\":1}"\n')),(0,l.kt)("h3",{id:"validation"},"Validation"),(0,l.kt)("p",null,"In this example, if you need to validate a value (e.g., a value less than 100), you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," macro in this model."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Item {\n    #[field(lt = 100)]\n    value: u8\n}\n")),(0,l.kt)("p",null,"In this, the following code is failed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let instance = Item::parse("{\\"value\\": 100}")?;\n')),(0,l.kt)("p",null,"If you need more details, see ",(0,l.kt)("a",{parentName:"p",href:"./fields"},"fields"),"."),(0,l.kt)("p",null,"Additionally, dade support several complex data structures."),(0,l.kt)("h2",{id:"nested-models"},"Nested Models"),(0,l.kt)("p",null,"To define a hierarchical data structure, write a code likely the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Child {\n    id: u128,\n}\n#[model]\nstruct Parent {\n    children: Vec<Child>,\n}\n")),(0,l.kt)("h2",{id:"recursive-models"},"Recursive Models"),(0,l.kt)("p",null,"For more complex, for example tree data structure."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Node {\n    id: u128,\n    left: Option<Box<Node>>,\n    right: Option<Box<Node>>,\n}\n")),(0,l.kt)("h2",{id:"inherited-models"},"Inherited Models"),(0,l.kt)("p",null,"If you use the same condition for a type in several models, write a code likely the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Id(\n    #[filed(ge = 1, lt = 100)]\n    u64\n);\n")),(0,l.kt)("h2",{id:"tuple-models"},"Tuple Models"),(0,l.kt)("p",null,"An array consisting of a different type corresponds to the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[model]\nstruct Item(u8, u8);\n")),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"A tuple, which has one length, does not support in dade. If you need it, use Vec type in this version."))),(0,l.kt)("h2",{id:"pattern-models"},"Pattern Models"),(0,l.kt)("p",null,"A model with constant values or more complex types corresponds to the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[model]\nstruct InnerModel {\n    id: u128,\n}\n#[model]\nenum InnerPattern {\n    P1,\n    P2,\n}\n#[model]\nenum Pattern {\n    Value1,\n    #[field(alias = "val2")]\n    Value2,\n    Value3(f32),\n    Value4(InnerModel),\n    Value5 {\n        id: i128,\n    },\n    Value6(InnerPattern),\n    Other(String),\n}\n')),(0,l.kt)("p",null,"In this case,"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If a JSON value is ",(0,l.kt)("inlineCode",{parentName:"li"},'"Value1"'),", the parse result will be ",(0,l.kt)("inlineCode",{parentName:"li"},"Pattern::Value1"),"."),(0,l.kt)("li",{parentName:"ul"},"If a JSON value is ",(0,l.kt)("inlineCode",{parentName:"li"},'"val2"'),", the parse result will be ",(0,l.kt)("inlineCode",{parentName:"li"},"Pattern::Value2"),"."),(0,l.kt)("li",{parentName:"ul"},"If a JSON value is ",(0,l.kt)("inlineCode",{parentName:"li"},"1.0"),", the parse result will be ",(0,l.kt)("inlineCode",{parentName:"li"},"Pattern::Value3(1.0)"),".")))}p.isMDXComponent=!0}}]);